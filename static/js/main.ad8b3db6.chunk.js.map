{"version":3,"sources":["Views/Home.js","Views/Prediction.js","Views/Connection.js","Views/Result.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","Grid","container","direction","justify","alignItems","to","Button","style","maxWidth","minWidth","variant","socket","io","connect","Prediction","useState","question","setQuestion","socketId","setSocketId","isStart","setIsStart","isRedirect","setRedirect","songId","setSongId","btnTexts","sendToServer","btnValue","sendData","emit","on","ans","type","console","log","pathname","state","id","v","Typography","component","Box","display","m","border","width","p","bgcolor","textAlign","step","q","createQuestionBox","onClick","value","color","Connection","Result","props","sondId","location","songinfo","useEffect","undefined","history","push","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad8b3db6.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport {Link} from 'react-router-dom'\nimport './Home.css'\n   \nfunction Home()\n{\n    return (\n        <div className=\"flex-container\">\n            \n            <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Link to=\"/prediction\">\n                        <Button style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                            Start\n                        </Button>\n                    </Link>\n                    <Link to=\"/connection\">\n                        <Button style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                            연결\n                        </Button>\n                    </Link>\n            </Grid>\n        \n        </div>\n\n    )\n}\nexport default Home","import React, {useState} from 'react'\nimport io from \"socket.io-client\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport './Home.css'\nimport { Redirect } from 'react-router';\n\nlet endPoint = \"http://localhost:5000/prediction\"\nlet socket = io.connect(`${endPoint}`)\n\nfunction Prediction() {\n    let [question, setQuestion] = useState([0,'질문 입니까?'])\n    let [socketId,setSocketId] = useState('')\n    let [isStart, setIsStart] = useState(true)\n    let [isRedirect, setRedirect] = useState(false)\n    let [songId, setSongId] = useState('0')\n    const btnTexts = ['네','몰라요','아니요']\n\n    //문제를 바꿀때 사용\n    // useEffect(()=>{\n    //     getBtnText()\n    // },[btnText.length]) //길이가 변할때 실행\n    \n    //=================서버에서 데이터===================//\n    // //    # data = {\n    // #             \"type\" : \"1\",\n    // #             \"step\": \"2\",\n    // #             \"q\":\"2번 질문입니다.\",\n    // #             'socketId': session['socketId']\n    // #         }\n    \n    const getServerData =()=>{\n        socket.on(\"answer\",ans=>{\n            if (ans.type === \"1\") //객관식\n            {\n                console.log('answer type: '+ans.type)\n                console.log('answer socketId: '+ans.socketId)\n                setQuestion(ans)\n                setSocketId(ans.socketId)\n            }else if(ans.type === \"2\")  //가사 찾기\n            {\n\n            }else if(ans.type === \"3\") //노래 결과\n            {\n                // data = {\n                //     \"type\" : \"3\",\n                //     \"songId\" : \"1234\"\n                // }\n                setSongId(ans.songId)\n                setRedirect(true)\n            }\n            ans = ''\n        })\n    }\n\n    //====================================//\n    //사용자 답 선택\n    //사전 조건 : 소켓 연결\n    const sendToServer = (btnValue) => {\n        //버튼 값을 보낸다.\n        const sendData = {\n            \"btnValue\" : btnValue,\n            \"socketId\" : socketId\n        }\n        socket.emit(\"answer\", sendData)\n        //값을 가져오고 갱신한다.\n        getServerData()\n    }\n    \n    //===============서버와 소켓 연결==================//\n    const connectServer =()=>{\n        socket.emit(\"join\",\n            {\n                socketId : socket.id,\n            }\n        )\n\n        //첫 문제 생성\n        // data = {\n        //     \"step\": \"1\",\n        //     \"q\":\"1번 질문입니다.\",\n        //     'socketId': session['socketId']\n        // }\n        socket.on(\"response\",v=>{\n            console.log('data '+ v.socketId)\n            setQuestion(v)\n            setSocketId(v.socketId)\n        })\n    }\n\n    //=================================//\n    const createQuestionBox =(question)=>{\n        if(isStart){\n            connectServer()\n            setIsStart(false)\n        }\n        return(\n            <div className=\"question-body\" >\n                <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Typography component=\"div\">\n                        <Box display=\"flex\" m={1} border={1} width={300}>\n                            <Box p={1} bgcolor=\"info.main\" width={50} textAlign=\"center\">\n                                <p className=\"question-text\">\n                                    {question.step}\n                                </p>\n                            </Box>\n                            <Box p={1}>\n                                <p className=\"question-text\" width={1/4}>\n                                    {question.q}\n                                </p>\n                            </Box>\n                        </Box>\n                    </Typography>\n\n                </Grid>\n            </div>\n        )\n\n    }\n    const createButton =()=>{\n        \n        return (\n            <div className=\"buttons\">\n                <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Button onClick={()=>sendToServer('1')} value='1' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                        {btnTexts[0]}\n                    </Button>\n                    <Button onClick={()=>sendToServer('2')} value='2' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\" color=\"primary\">\n                        {btnTexts[1]}\n                    </Button>\n                    <Button onClick={()=>sendToServer('3')} style={{maxWidth:'300px',minWidth:'300px'}} value='3' variant=\"outlined\" color=\"secondary\">\n                        {btnTexts[2]}\n                    </Button>\n                </Grid>\n            </div>\n        )\n    }\n\n\n    //=======================================//\n    if(isRedirect){\n        return <Redirect to= {{\n            pathname: \"/Result\",\n            state : songId\n        }}\n        />\n    }else\n    return (\n        //JSX : HTML 대용\n        <div className='main'>\n            <div className=\"question\">\n                {createQuestionBox(question)}\n            </div>\n            <div className=\"flex-container\">\n                {createButton()}\n            </div>\n        </div>\n    );\n}\n\nexport default Prediction;","import React from \"react\";\nimport io from \"socket.io-client\";\nimport './Home.css'\n\nlet endPoint = \"http://localhost:5000/connection\"\nlet socket = io.connect(`${endPoint}`)\n\nfunction Connection()\n{\n    const getQuestion =()=>{\n        socket.on(\"response\",ans=>{\n            console.log('response: '+ans)\n        })\n    }\n\n    const connectServer =()=>{\n        socket.emit(\"connect1\",\"0\")\n        getQuestion()\n    }\n\n    return(\n        <div className=\"question\">\n            연결\n            {connectServer()}\n        </div>\n        \n    )\n}\nexport default Connection","import React, {useEffect} from 'react'\nimport './Result.css'\n\nfunction Result(props)\n{\n    let sondId = props.location.state\n    const songinfo={\n        title : \"title\",\n        artist : \"artist\",\n        album : \"album\",\n        genre : \"genre\",\n        lyric : \"lyric\"\n    }\n    \n    useEffect(()=>{\n        if (props.location.state === undefined){\n            props.history.push(\"/\");\n        }\n    })\n    \n    const displaySong =()=>{\n        console.log(\"result song1: \" +props.location.state)\n        console.log(\"sondId: \"+ sondId)\n        return (\n            <div className = \"songinfo_side\">\n                <div className =\"songinfo\">\n                    <p>{songinfo.title}</p>\n                    <p>{songinfo.artist}</p>\n                    <p>{songinfo.album}</p>\n                    <p>{songinfo.genre}</p>\n                    <p>{songinfo.lyric}</p>\n                </div>\n            </div>\n        )\n    }\n\n    if (props.location.state){\n        return (\n            <div>\n                <span>{props.location.state}</span>\n                {displaySong()}\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\nexport default Result","import React from 'react'\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\"\nimport Home from './Views/Home'\nimport Prediction from './Views/Prediction';\nimport Connection from './Views/Connection';\nimport Result from './Views/Result';\n\nfunction App() {\n \n    return (\n        //JSX : HTML 대용\n            <div>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home}/>\n                        <Route path=\"/prediction\" component={Prediction}/>\n                        <Route path=\"/connection\" component={Connection}/>\n                        <Route path=\"/result\" component={Result} />\n                    </Switch>\n                </Router>\n            </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}