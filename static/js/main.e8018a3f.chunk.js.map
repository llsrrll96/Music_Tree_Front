{"version":3,"sources":["images/tree.png","Views/Home.js","Views/Component/Search.js","Views/PredictionB.js","Views/Prediction.js","Views/Component/Result.js","Views/Container/SidebarItem.js","Views/Container/Sidebar.js","Views/Container/Admin.js","Views/Component/AdminiAddSongPreview.js","Views/Container/AdminiAddSong.js","Views/Container/DataGridDemo.js","Views/Container/SearchSong.js","App.js","reportWebVitals.js","Views/Component/Header.js","index.js"],"names":["Home","className","src","tree","alt","Grid","container","direction","justify","alignItems","to","Button","style","maxWidth","minWidth","variant","socket","io","connect","Search","socketId","useState","lyrics","setLyrics","isResult","setIsResult","songId","setSongId","pathname","state","console","log","noValidate","autoComplete","Box","display","justifyContent","m","p","bgcolor","TextField","required","id","label","onClick","document","getElementById","value","emit","lyricsInput","on","data","song_answer","color","PredictionB","question","setQuestion","btnValue","setBtnValue","setSocketId","isStart","setIsStart","isRedirect","isSearch","getServerData","question_type","createQuestionBox","v","Typography","component","border","width","textAlign","step","question_type_name","useEffect","createButton","buttons","map","btn","sendData","sendToServer","Prediction","loading","setLoading","isConnection","useRef","getQuestionData","off","sendHandler","e","preventDefault","currentTarget","alert","current","result","sendAnswer","LinearProgress","type","song","questionBox","Result","props","songinfo","location","opts","height","playerVars","autoplay","undefined","history","push","title","artist","album","genre","videoId","SidebarItem","menu","isActive","name","Sidebar","pathName","useLocation","path","index","ColorButton","withStyles","theme","root","palette","getContrastText","purple","backgroundColor","column","field","headerName","editable","Admin","host","songPosts","setSongPosts","editRowsModel","setEditRowsModel","setEditRowsModelKey","selectionModel","setSelectionModel","selectedLowForModify","setSelectedLowForModify","pageNum","setPageNum","loadSongPost","num","a","axios","get","then","songs","fetchSongPosts","handleEditRowModelChange","useCallback","params","model","Object","keys","rows","columns","pageSize","checkboxSelection","onEditRowModelChange","onSelectionModelChange","newSelection","onRowSelected","stopPropagation","length","post","catch","error","postModifySongs","handleModifyButtonClick","startIcon","postDeleteSongs","handleDeleteButtonClick","handleRefreshLyricsButtonClick","AdminiAddSongPreview","songData","s","ListItem","button","ListItemText","primary","secondary","green","useStyles","makeStyles","formControl","margin","spacing","selectEmpty","marginTop","AdminiAddSong","setSong","isSave","setIsSave","pageNumberParam","setPageNumberParam","grNumberParam","setGrNumberaParam","classes","FormControl","InputLabel","Select","labelId","onChange","event","target","MenuItem","FormHelperText","pageNumber","grNumber","getSongData","saveSongData","CircularProgress","witdh","description","sortable","valueGetter","getValue","lastName","firstName","age","DataGridDemo","SearchSong","fetch","method","mode","headers","response","xml","DOMParser","parseFromString","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Header","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e8018a3f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tree.c622d5b2.png\";","import React from \"react\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport {Link} from 'react-router-dom';\nimport tree from '../images/tree.png';\nimport './Home.css';\n\n\nfunction Home()\n{\n    return (\n        <div className=\"flex-container\">\n             <div className=\"tree-img\">\n                <img src={tree} alt =\"\"/>\n            </div>           \n            <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Link to=\"/prediction2\">\n                        <Button style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                            Start\n                        </Button>\n                    </Link>\n            </Grid>\n        </div>\n\n    )\n}\nexport default Home","import React ,{useState} from 'react'\r\nimport { Redirect } from 'react-router';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport io from \"socket.io-client\";\r\n\r\n//소켓 아이디 유지 못하는 현상 발생\r\nlet endPoint = \"http://localhost:5000/prediction\"\r\nlet socket = io.connect(`${endPoint}`)\r\n\r\nconst Search = (socketId) => {\r\n    let [lyrics, setLyrics] = useState('')\r\n    let [isResult, setIsResult] = useState(false)\r\n    let [songId, setSongId] = useState('')\r\n\r\n    const sendHandler = ()=>{\r\n        setLyrics(document.getElementById(\"lyrics-required\").value)\r\n        console.log(lyrics)\r\n\r\n        //서버 전송\r\n        socket.emit(\"lyrics_find\", {socketId : socketId, lyricsInput : lyrics})\r\n        socket.on(\"answer\",data=>\r\n        {\r\n            setSongId(data.song_answer)\r\n            setIsResult(true)\r\n        })\r\n    }\r\n\r\n    const unknownHandler = () =>{\r\n        //서버에 모른다는 거 보냄\r\n    }\r\n\r\n    if(isResult){\r\n        return <Redirect to= {{\r\n            pathname: \"/Result\",\r\n            state : songId//test\r\n        }}\r\n        />\r\n    }else\r\n    return (\r\n        <div className=\"search-flex-container\">\r\n            {console.log(socketId)}\r\n\r\n            <div className=\"search-input-box\">\r\n                <form className=\"input\" noValidate autoComplete=\"off\">\r\n                    <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                        <TextField required id=\"lyrics-required\" label=\"가사 입력\"/>\r\n                    </Box>\r\n                    <Box className=\"search-box\" display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                        <div className=\"search-send-button\">\r\n                            <Button id='sendBtn' onClick={sendHandler} variant=\"outlined\" color=\"primary\">\r\n                                보내기\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"search-unknown-button\">\r\n                            <Button id='unknownBtn' onClick={unknownHandler} variant=\"outlined\" color=\"secondary\">\r\n                                모름\r\n                            </Button>\r\n                        </div>\r\n                    </Box>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport { Redirect } from 'react-router';\nimport io from \"socket.io-client\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport './Home.css';\nimport tree from '../images/tree.png';\nimport Search from './Component/Search';\n\nlet endPoint = \"http://localhost:5000/prediction\"\nlet socket = io.connect(`${endPoint}`)\n\nfunction PredictionB() {\n    let [question, setQuestion] = useState([])\n    let [btnValue, setBtnValue] = useState([])\n    let [socketId,setSocketId] = useState(\"\")\n    let [isStart, setIsStart] = useState(true)\n    let [isRedirect, setIsRedirect] = useState(false)\n    let [isSearch, setIsSearch] = useState(false) //test\n    let [songId, setSongId] = useState('0')\n    \n    //문제를 바꿀때 사용\n    useEffect(()=>{\n        console.log(question)\n        createQuestionBox(question)\n        createButton(btnValue)\n    }) //길이가 변할때 실행\n    \n    //=================서버에서 데이터 받아오는 함수===================//\n    //     data = {\n    //         \"type\": \"1\",\n    //         \"step\": step,  # 1: 성별, 2: 활동유형, 3:장르, 4:년도, 5:OST 여부, 6:피처링 여부, 7:분위기, 8:관련성\n    //         \"question_type_name\": question_type_name[step-1],  #질문에 나올 질문할 속성 명, \"성별\"\n    //         \"question_type\": question_type[step-1]  #답변으로 표시될 노래 속성값들 ,  [\"남성\",\"여성\"]\n    // }\n    //type : 1 = 질문, 2 = 가사 , 3 = 결과\n\n    function getServerData (){\n        // socket.on(\"answer\",ans=>{\n        //     console.log('answer type: '+ans.type)\n        //     if (ans.type === \"1\") //객관식\n        //     {\n        //         setQuestion(ans)\n        //     }else if(ans.type === \"2\")  //가사 찾기\n        //     {\n        //         setIsSearch(true)\n        //     }else if(ans.type === \"3\") //노래 결과\n        //     {\n        //         // data = {\n        //         //     \"type\" : \"3\",\n        //         //     \"songId\" : \"1234\"\n        //         // }\n        //         setSongId(ans.songId)\n        //         setIsRedirect(true)\n        //     }\n        // })\n        /*질문생성*/\n        console.log(\"서버 데이터\")\n        socket.emit(\"question\", {socketId : socket.id})\n        socket.on(\"response\",data=>{\n            setQuestion(data)\n            setBtnValue(data.question_type)\n            console.log(data)\n            console.log('버튼: ' + data.question_type)\n        })\n    }\n\n    //====================================//\n    //사용자 답 선택\n    //사전 조건 : 소켓 연결\n    const sendToServer = (btnValue) => {\n        //버튼 값을 보낸다.\n        const sendData = {\n            \"btnValue\" : btnValue,\n            \"socketId\" : socket.id\n        }\n        socket.emit(\"answer\", sendData)\n        \n        //값을 가져오고 갱신한다.\n        getServerData(socketId)\n    }\n    \n    //===============서버와 소켓 연결==================//\n    function connectServer (){\n        setSocketId(socket.id)\n        socket.emit(\"join\",\n            {\n                socketId : socket.id,\n            },()=>{\n                socket.on(\"jresponse\",v=>{\n                    console.log('소켓 '+ v.socketId)\n                    getServerData(v.socketId)\n                })\n            }\n        )\n        //첫 문제 생성\n    //     data = {\n    //         \"type\": \"1\",\n    //         \"step\": step,  # 1: 성별, 2: 활동유형, 3:장르, 4:년도, 5:OST 여부, 6:피처링 여부, 7:분위기, 8:관련성\n    //         \"question_type_name\": question_type_name[step-1],  #질문에 나올 질문할 속성 명, \"성별\"\n    //         \"question_type\": question_type[step-1]  #답변으로 표시될 노래 속성값들 ,  [\"남성\",\"여성\"]\n    // }\n    }\n\n    //===============질문 생성==================//\n    function createQuestionBox (question)\n    {\n        if(isStart){\n            connectServer()            \n            setIsStart(false)\n        }\n\n        return(\n            <div className=\"question-body\" >\n                <Grid\n                container\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Typography component=\"div\">\n                        <Box display=\"flex\" m={1} border={1} width={300}>\n                            <Box p={1} bgcolor=\"info.main\" width={50} textAlign=\"center\">\n                                <p className=\"question-text\">\n                                    {question.step}\n                                </p>\n                            </Box>\n                            <Box p={1}>\n                                <p className=\"question-text\" width={1/4}>\n                                    {question.question_type_name}\n                                </p>\n                            </Box>\n                        </Box>\n                    </Typography>\n\n                </Grid>\n            </div>\n        )\n    }\n    \n    //버튼생성\n    const createButton =(buttons)=> //배열 형식\n        buttons && buttons.map(btn => {\n        return(<Button onClick={()=>sendToServer(btn)} value='btn' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                    {btn}\n                </Button>\n        )})\n\n    // const buttonList = testbtn && testbtn.map(btn => {\n    //         return(<Button onClick={()=>sendToServer(btn)} value='btn' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n    //             {btn}\n    //         </Button>)\n    // })\n    \n\n    //=======================================//\n    if(isRedirect){\n        return <Redirect to= {{\n            pathname: \"/Result\",\n            state : songId\n        }}/>\n    }else if(isSearch){\n        return <Search socketId = {socketId}/>\n    }else{\n        return (\n            //JSX : HTML 대용\n            <div className='main'>\n                <div className=\"search-tree-img \">\n                    <img src={tree} alt =\"\"/>\n                </div>\n                <div className=\"question\">\n                    {createQuestionBox(question)}\n                </div>\n                <div className=\"flex-container\">\n                    <div className=\"buttons\">\n                        <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        >   \n                            {createButton(question.question_type)}\n                        </Grid>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PredictionB;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport io from \"socket.io-client\";\r\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport tree from '../images/tree.png';\r\n//import Search from './Component/Search';\r\nimport './Home.css';\r\n\r\nlet host = \"119.202.133.127\"\r\nlet endPoint = \"http://\"+host+\":5000/prediction\"\r\nlet socket = io.connect(`${endPoint}`)\r\n\r\nfunction Prediction() \r\n{\r\n    let [loading , setLoading] = useState(true)\r\n    let [question, setQuestion] = useState([])\r\n    let [btnValue, setBtnValue] = useState([])\r\n\r\n    const isConnection = useRef(false)\r\n\r\n//=================================//\r\n    /* 데이터 요청 함수 */\r\n    function getQuestionData()\r\n    {\r\n        setLoading(true)\r\n        console.log(\"서버 데이터\")\r\n        socket.emit(\"question\", {socketId : socket.id}) //step 지우기\r\n        socket.on(\"response\",data=>{\r\n            setQuestion(data) //set 될때마다 리렌더링됨\r\n            setBtnValue(data.question_type)\r\n            console.log(data)\r\n            console.log('버튼: ' + data.question_type)\r\n            setLoading(false)\r\n            socket.off(\"response\")\r\n        })\r\n    }\r\n    function getQuestionData2() //step2 test\r\n    {\r\n        setLoading(true)\r\n        console.log(\"서버 데이터\")\r\n        socket.emit(\"question\", {socketId : socket.id})\r\n        socket.on(\"response\",data=>{\r\n            setQuestion(data) //set 될때마다 리렌더링됨\r\n            setBtnValue(data.question_type)\r\n            console.log(data)\r\n            console.log('버튼: ' + data.question_type)\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    /* 클릭한 값을 서버에 보낸다.*/\r\n    const sendAnswer = (e, btnValue) => {\r\n        e.preventDefault()\r\n        console.log('btn: '+btnValue)\r\n        const sendData = {\r\n            \"btnValue\" : btnValue,\r\n            \"socketId\" : socket.id\r\n        }\r\n        socket.emit(\"answer\", sendData)\r\n\r\n        socket.on(\"answer\",data=>{\r\n            //서버의 응답을 받은 후\r\n            console.log(\"answer: \"+data.result)\r\n            //서버에 다음 질문 요청\r\n            getQuestionData()\r\n            //getQuestionData2()\r\n            socket.off(\"answer\")\r\n        })\r\n    }\r\n\r\n    /* 가사 검색 */\r\n    const sendHandler = (e)=>{\r\n        e.preventDefault()\r\n        if (e.currentTarget.id === 'sendBtn')\r\n        {\r\n            let lyrics = document.getElementById(\"lyrics-required\").value\r\n            console.log(\"가사: \"+lyrics)\r\n            if (!lyrics){\r\n                alert('가사를 입력해 주세요.')\r\n            }else{\r\n                //서버 전송\r\n                socket.emit(\"lyrics_find\", {socketId : socket.id, lyricsInput : lyrics})\r\n                socket.on(\"answer\",data=>{\r\n                    setQuestion(data) //set 될때마다 리렌더링됨\r\n                })\r\n            }\r\n        }else{ //모른다.\r\n            socket.emit(\"lyrics_find\", {socketId : socket.id, lyricsInput : ''})\r\n            socket.on(\"answer\",data=>{\r\n                setQuestion(data) //set 될때마다 리렌더링됨\r\n            })\r\n        }\r\n    }\r\n\r\n//=================================//\r\n    useEffect(()=>{\r\n        console.log(\"마운트될때만 실행된다.\") //처음 나타났을때\r\n        if(!isConnection.current){ //첫\r\n            isConnection.current = true\r\n            socket.emit(\"join\",{socketId : socket.id})\r\n        }\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        console.log('렌더링 될때마다 실행')\r\n        if(isConnection.current)\r\n        {\r\n            console.log('연결성공시 실행')\r\n            getQuestionData()\r\n        }\r\n        else{\r\n            console.log('false')\r\n        }\r\n    },[])\r\n\r\n//=================================//\r\n    /* 질문 컴포넌트 */\r\n    function questionBox(question)\r\n    {\r\n        //타입 체크\r\n        if(question.type === '1')\r\n        {\r\n            return(\r\n                <div className=\"question-body\" >\r\n                    <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    >\r\n                        <Typography component=\"div\">\r\n                            <Box display=\"flex\" m={1} border={1} width={300}>\r\n                                <Box p={1} bgcolor=\"info.main\" width={50} textAlign=\"center\">\r\n                                    <p className=\"question-text\">\r\n                                        {question.step}\r\n                                    </p>\r\n                                </Box>\r\n                                <Box p={1}>\r\n                                    <p className=\"question-text\" width={1/4}>\r\n                                        {question.question_type_name}\r\n                                    </p>\r\n                                </Box>\r\n                            </Box>\r\n                        </Typography>\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        }else if(question.type === '2'){ //가사\r\n            console.log(\"가사\")\r\n            return (\r\n                <div className=\"search-flex-container\">        \r\n                    <div className=\"search-input-box\">\r\n                        <form className=\"input\" noValidate autoComplete=\"off\">\r\n                            <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                                <TextField required id=\"lyrics-required\" label=\"가사 입력\"/>\r\n                            </Box>\r\n                            <Box className=\"search-box\" display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                                <div className=\"search-send-button\">\r\n                                    <Button id='sendBtn' onClick={sendHandler} variant=\"outlined\" color=\"primary\">\r\n                                        보내기\r\n                                    </Button>\r\n                                </div>\r\n                                <div className=\"search-unknown-button\">\r\n                                    <Button id='unknownBtn' onClick={sendHandler} variant=\"outlined\" color=\"secondary\">\r\n                                        모름\r\n                                    </Button>\r\n                                </div>\r\n                            </Box>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else if(question.type === '3'){ //결과\r\n            return (<Redirect to= {{\r\n                pathname: \"/Result\",\r\n                song : question\r\n            }}/>)\r\n        }\r\n    }\r\n\r\n    /* 답변 컴포넌트 */\r\n    function buttonDIV()\r\n    {\r\n        return(\r\n            <div className=\"flex-container\">\r\n                <div className=\"buttons\">\r\n                    <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    >   \r\n                        {createButton(question.question_type)}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const createButton =(buttons)=> //배열 형식\r\n        buttons && buttons.map(btn => {\r\n            return(\r\n                    <Button onClick={(e)=>sendAnswer(e, btn)} key={btn} value='btn' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\r\n                        {btn}\r\n                    </Button>\r\n        )})\r\n\r\n    return (\r\n        <div className='main'>\r\n            {console.log('question: '+ question)}\r\n\r\n            <div className=\"search-tree-img \">\r\n                <img src={tree} alt =\"\"/>\r\n            </div>\r\n            { loading &&<LinearProgress />}\r\n\r\n            {questionBox(question)}\r\n            {buttonDIV()}\r\n        </div>\r\n    );\r\n}\r\nexport default Prediction;","import React, {useEffect} from 'react'\nimport YouTube from 'react-youtube';\nimport './Result.css'\n\nfunction Result(props)\n{\n    let songinfo = props.location.song\n    //let [songinfo, setSonginfo] = useState([])\n    // let songinfo= {\n    //         'song_id': 2, \n    //         'title': \"롤린 (Rollin')\", \n    //         'artist': '브레이브걸스', \n    //         'album': \"Rollin'\", \n    //         'ost': 'None', \n    //         'rel_date': 'datetime.date(2017, 3, 7)', \n    //         'genre': 2, \n    //         'group_type': 2, \n    //         'gender': 2,\n    //          'feat': '\\r', \n    //          'relevance': '사랑', \n    //          'mood': 11, \n    //          'lyrics': \"그 날을 잊지 못해 babe 날 보며 환히 웃던 너의 미소에 홀린 듯 I'm fall in love But 너무 쪽팔림에 난 그저 한마디 말도 못해 babe I wanna you 너의 눈빛은 날 자꾸 네 곁을 맴돌게 해 Just only you 굳게 닫힌 내 맘이 어느새 무너져버려 Because of you 온통 너의 생각뿐이야 나도 미치겠어 너무 보고 싶어 매일 매일 매일 자꾸 초라해지잖아 내 모습이 그대여 내게 말해줘 사랑한다고 Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 하루가 멀다 하고 Rolling in the deep Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 기다리고 있잖아 Babe Just only you 기다리고 있잖아 Babe Just only you Hey I just wanna be with you 오늘 밤이 가기 전에 I can't feel you 조금 더 다가와 줘 Tonight I'm ready for you You wanna touch me I know 대체 뭘 고민해 빨리 안아 아닌 척 모르는 척 하다가 늦게 놓치고 후회 말아 I wanna you 너의 눈빛은 날 자꾸 네 곁을 맴돌게 해 Just only you 굳게 닫힌 내 맘이 어느새 무너져버려 Because of you 온통 너의 생각뿐이야 나도 미치겠어 너무 보고 싶어 매일 매일 매일 자꾸 초라해지잖아 내 모습이 그대여 내게 말해줘 사랑한다고 Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 하루가 멀다 하고 Rolling in the deep Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 기다리고 있잖아 Babe Just only you 이제 와 숨기려 하지 마요 그대여 아닌 척하지 마요 온종일 난 그대 생각에 잠긴 채로 난 이대로 기다리고 있어요 Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 하루가 멀다 하고 Rolling in the deep Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 기다리고 있잖아 Babe Just only you 기다리고 있잖아 Babe Just only you\", \n    //          'words': 'None', \n    //          'melon_song_id': 30287019, \n    //          'type': '3', \n    //          'url': 'https://www.youtube.com/watch?v=-Axm4IYHVYk'\n    // }\n\n    const opts = {\n        width: '100%',\n        height: '480px',\n        playerVars: {\n          // https://developers.google.com/youtube/player_parameters\n          autoplay: 1,\n        }\n    }\n\n    //값 없이 들어 왔을 경우\n    useEffect(()=>{\n        if (props.location.song === undefined){\n            props.history.push(\"/\");\n        }\n    })\n\n    const displaySong =()=>{\n\n        return (\n            <div className = \"songinfo-border\">\n                <div className =\"songinfo\">\n                    <h5>{songinfo.title}</h5>\n                    <p>{songinfo.artist}</p>\n                    <p>{songinfo.album}</p>\n                    <p>{songinfo.genre}</p>\n                    <p>{songinfo.lyrics}</p>\n                </div>\n                <div className='songinfo-wrapper'>\n                    \n                    <YouTube videoId=\"-Axm4IYHVYk\" opts={opts}/>\n                </div>\n\n            </div>\n        )\n    }\n\n    if (props.location.song){// !지우기\n        return (\n            <div>\n                {displaySong()}\n            </div>\n        )\n    } else {\n        return <div>{alert('다시 시작해 주세요.')}다시 시작해 주세요.</div>;\n    }\n    // {\n    //     'song_id': 2, \n    //     'title': \"롤린 (Rollin')\", \n    //     'artist': '브레이브걸스', \n    //     'album': \"Rollin'\", \n    //     'ost': None, \n    //     'rel_date': datetime.date(2017, 3, 7), \n    //     'genre': 2, \n    //     'group_type': 2, \n    //     'gender': 2,\n    //      'feat': '\\r', \n    //      'relevance': '사랑', \n    //      'mood': 11, \n    //      'lyrics': \"그 날을 잊지 못해 babe 날 보며 환히 웃던 너의 미소에 홀린 듯 I'm fall in love But 너무 쪽팔림에 난 그저 한마디 말도 못해 babe I wanna you 너의 눈빛은 날 자꾸 네 곁을 맴돌게 해 Just only you 굳게 닫힌 내 맘이 어느새 무너져버려 Because of you 온통 너의 생각뿐이야 나도 미치겠어 너무 보고 싶어 매일 매일 매일 자꾸 초라해지잖아 내 모습이 그대여 내게 말해줘 사랑한다고 Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 하루가 멀다 하고 Rolling in the deep Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 기다리고 있잖아 Babe Just only you 기다리고 있잖아 Babe Just only you Hey I just wanna be with you 오늘 밤이 가기 전에 I can't feel you 조금 더 다가와 줘 Tonight I'm ready for you You wanna touch me I know 대체 뭘 고민해 빨리 안아 아닌 척 모르는 척 하다가 늦게 놓치고 후회 말아 I wanna you 너의 눈빛은 날 자꾸 네 곁을 맴돌게 해 Just only you 굳게 닫힌 내 맘이 어느새 무너져버려 Because of you 온통 너의 생각뿐이야 나도 미치겠어 너무 보고 싶어 매일 매일 매일 자꾸 초라해지잖아 내 모습이 그대여 내게 말해줘 사랑한다고 Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 하루가 멀다 하고 Rolling in the deep Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 기다리고 있잖아 Babe Just only you 이제 와 숨기려 하지 마요 그대여 아닌 척하지 마요 온종일 난 그대 생각에 잠긴 채로 난 이대로 기다리고 있어요 Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 하루가 멀다 하고 Rolling in the deep Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' Rollin' 기다리고 있잖아 Babe Just only you 기다리고 있잖아 Babe Just only you\", \n    //      'words': None, \n    //      'melon_song_id': 30287019, \n    //      'type': '3', \n    //      'url': 'https://www.youtube.com/watch?v=-Axm4IYHVYk'}\n\n\n//     자극적인(1), 화난(2), 긴장되는(3),\n// 슬픈(4), 지루한(5), 졸린(6),\n// 잔잔한(7), 평화로운(8), 느긋한(9),\n// 기쁜(10), 행복한(11), 신나는(12)\n\n// =MATCH(A1,{\"자극적인\",\"화난\",\"긴장되는\", \"슬픈\", \"지루한\", \"졸린\", \"잔잔한\", \"평화로\n}\nexport default Result","import React from 'react'\r\nimport './Admin.css';\r\n\r\nfunction SidebarItem({ menu, isActive }) {\r\n    return isActive === true ? (\r\n      <div className=\"sidebar-item active\">\r\n        <p>{menu.name}</p>\r\n      </div>\r\n    ) : (\r\n      <div className=\"sidebar-item \">\r\n        <p>{menu.name}</p>\r\n      </div>\r\n    );\r\n  }\r\nexport default SidebarItem","import React from 'react'\r\nimport {Link,useLocation} from 'react-router-dom'\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport './Admin.css';\r\n\r\nfunction Sidebar() {\r\n\r\n    // URL의 path값을 받아올 수 있다.\r\n    const pathName = useLocation().pathname;\r\n  \r\n    const menus = [\r\n      { name: \"노래추가\", path:\"/admin/add\"},\r\n      { name: \"노래목록\", path:\"/admin\"}\r\n    ];\r\n  \r\n    return (\r\n      <div className=\"sidebar\">\r\n        {menus.map((menu, index) => {\r\n          return (\r\n            <Link to={menu.path} key={index}>\r\n              <SidebarItem\r\n                menu={menu}\r\n                isActive={pathName === menu.path ? true : false}\t// 현재 URL pathname과 객체에 담긴 path값 일치 여부 확인\r\n              />\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n}\r\nexport default Sidebar;","import React, {useState, useEffect,useCallback} from 'react'\r\nimport axios from 'axios';\r\nimport Sidebar from \"./Sidebar\";\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport './Admin.css';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { purple } from '@material-ui/core/colors';\r\n\r\n//custom button\r\nconst ColorButton = withStyles((theme) => ({\r\n    root: {\r\n      color: theme.palette.getContrastText(purple[500]),\r\n      backgroundColor: purple[500],\r\n      '&:hover': {\r\n        backgroundColor: purple[700],\r\n      },\r\n    },\r\n  }))(Button);\r\n//\r\nconst column =[\r\n    {field: 'id',headerName:'ID' },\r\n    {field: 'title', headerName:'제목' ,width:130},\r\n    {field: 'artist', headerName:'가수', width:130},\r\n    {field: 'album', headerName:'앨범',width: 130},\r\n    {field: 'ost', headerName:'OST', type:'number',width:100},\r\n    {field: 'rel_date', headerName: 'DATE', width:120},\r\n    {field: 'genre', headerName: '장르', type:'number', width:90},\r\n    {field: 'group_type', headerName: '유형', type:'number', width:90},\r\n    {field: 'gender', headerName: '성별', type:'number', width:90},\r\n    {field: 'feat', headerName: 'Feat', width:100},\r\n    {field: 'relevance', headerName: '관련성', width:110, editable:true},\r\n    {field: 'mood', headerName: '분위기', width:100, editable: true},\r\n    {field: 'lyrics', headerName: '가사', width:200, editable: true},\r\n    {field: 'words', headerName: '기타', width:100,editable:true}\r\n]\r\n\r\nfunction Admin ()  {\r\n    const host = '119.202.133.127'\r\n\r\n    const [songPosts, setSongPosts] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    //const [currentPage, setCurrentPage] = useState(1)\r\n    //const [postsPerPage, setpostsPerPage] = useState(50)\r\n    const [editRowsModel, setEditRowsModel] = useState({})       //수정된 row\r\n    const [editrowsMedelKey, setEditRowsModelKey] = useState('') //key\r\n    const [selectionModel, setSelectionModel] = useState([])            //선택된 id\r\n    const [selectedLowForModify, setSelectedLowForModify] = useState({}) //수정 선택된 값\r\n    const [pageNum , setPageNum] = useState(1)\r\n\r\n    useEffect(() => {\r\n        loadSongPost(pageNum)\r\n    },[]);\r\n\r\n    const loadSongPost = (num)=>{\r\n        async function fetchSongPosts(){\r\n            setLoading(true);    \r\n            await axios.get('http://'+host+':5000/song-info?index=' + num)\r\n            .then((songs)=>{\r\n                setSongPosts(songs.data);\r\n                setLoading(false);\r\n            });\r\n        }\r\n        fetchSongPosts()\r\n    }\r\n    \r\n    \r\n    //수정할 값 셋팅 하는 함수\r\n    //선언한 함수 계속 사용해야 할때 = useCallback\r\n    const handleEditRowModelChange = useCallback(\r\n        (params) => {\r\n            setEditRowsModel(params.model)\r\n            setEditRowsModelKey(Object.keys(params.model)[0])\r\n            //console.log(Object.keys(params.model)[0])\r\n        },\r\n        []\r\n    )\r\n\r\n    //selection 된 row 들\r\n    //id 배열 데이터 삭제 버튼\r\n    const handleDeleteButtonClick = ()=>{\r\n        console.log(selectionModel) //[1, 2, 3, 4, 5]\r\n        if ((selectionModel && selectionModel.length) < 1 || selectionModel[0]== null){\r\n            alert('삭제할 행을 선택해 주세요')\r\n        }else{\r\n            \r\n            async function postDeleteSongs(){  \r\n                await axios.post('http://'+host+':5000/admin/delete',selectionModel)\r\n                .then( function(result) {\r\n                    console.log(result.data)\r\n                    alert(result.data.result)\r\n                }).catch( (error) => {\r\n                    console.log('error: ', error)\r\n                })\r\n            }\r\n            postDeleteSongs()\r\n        }\r\n    }\r\n    //수정 버튼\r\n    const handleModifyButtonClick = (selectedLowForModify) =>{\r\n        console.log(selectionModel)\r\n        if ((selectionModel && selectionModel.length) === 1){ //수정 항목 보내는 부분\r\n            console.log(selectedLowForModify) //선택된 값\r\n            console.log(selectedLowForModify.data)            \r\n            async function postModifySongs(){  \r\n                await axios.post('http://'+host+':5000/admin/modify',selectedLowForModify.data)\r\n                .then( function(result) { //서버에서 온 값\r\n                    console.log(result.data)\r\n                    alert(result.data.result)\r\n                }).catch( (error) => {\r\n                    console.log('error: ', error)\r\n                })\r\n            }\r\n            postModifySongs()\r\n        }else{\r\n            alert(\"한 행씩 수정해 주세요\")\r\n        }\r\n    }\r\n    //페이지 Down 버튼\r\n    const handleChangePageDownButtonClick = () =>{\r\n        if(pageNum > 1)\r\n        {\r\n            //pageNumber -= 50\r\n            loadSongPost(pageNum - 500)\r\n            setPageNum(pageNum - 500)\r\n        }else{\r\n            alert(\"내릴 수 없습니다.\")\r\n        }\r\n        \r\n    }\r\n    //페이지 Up 버튼\r\n    const handleChangePageUpButtonClick = ()=>{\r\n        //pageNumber += 50\r\n        loadSongPost(pageNum + 500)\r\n        setPageNum(pageNum + 500)\r\n    }\r\n    //가사 단어 추출\r\n    const handleRefreshLyricsButtonClick= ()=>{\r\n        console.log(\"가사 단어 추출\")\r\n        async function fetchSongPosts(){\r\n            setLoading(true);    \r\n            await axios.get('http://'+host+':5000/admin/words')\r\n            .then((result)=>{\r\n                alert(result)\r\n                setLoading(false);\r\n            })\r\n        }\r\n        fetchSongPosts()\r\n    }\r\n\r\n\r\n    //row 선택\r\n    const onRowSelected = (params)=>{\r\n        //console.log(params.data)\r\n        setSelectedLowForModify(params)\r\n    }\r\n\r\n    // {\"3\":{\"lyrics\":{\"value\": \"값\"}}}\r\n    return (\r\n        \r\n        <div>\r\n            <div >\r\n                <header className=\"admini-header\">노래 목록</header>\r\n            </div>\r\n            \r\n            <div className=\"admini-main\">\r\n                <div className=\"admini-sidebar\">\r\n                    <Sidebar></Sidebar>\r\n                </div>\r\n                <div className=\"admini-content\">\r\n                    {/* <div>\r\n                        <code>editRowsModel: {JSON.stringify(editRowsModel)}</code>\r\n                    </div> */}\r\n                    <div style={{height: 600, width:'100%' }}>\r\n                        <DataGrid className=\"datagrid\"\r\n                        rows={songPosts} \r\n                        columns={column} \r\n                        loading={loading} \r\n                        pageSize={100} \r\n                        checkboxSelection\r\n                        editRowsModel={editRowsModel}\r\n                        onEditRowModelChange={handleEditRowModelChange}\r\n                        selectionModel={selectionModel}\r\n                        onSelectionModelChange={(newSelection) => {\r\n                            setSelectionModel(newSelection.selectionModel);\r\n                        }}\r\n                        onRowSelected={onRowSelected}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"admini-buttons\">\r\n                        <div className=\"btn\">\r\n                            <Button \r\n                                onClick={e => {\r\n                                    e.stopPropagation()\r\n                                    handleModifyButtonClick(selectedLowForModify)\r\n                                }}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                startIcon={<SaveIcon/>}\r\n                                \r\n                            >\r\n                                수정하기\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <Button \r\n                                onClick={e => {\r\n                                    e.stopPropagation()\r\n                                    handleDeleteButtonClick()\r\n                                }}\r\n                                color=\"secondary\"\r\n                                variant=\"contained\"\r\n                                startIcon={<DeleteIcon/>}\r\n                            >\r\n                                삭제하기\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <ColorButton\r\n                                onClick={e=>{\r\n                                    e.stopPropagation()\r\n                                    handleChangePageDownButtonClick()\r\n                                }}\r\n                                color=\"purple\"\r\n                                variant = \"contained\"\r\n                                className = \"changePageDownbtn\"\r\n                            >\r\n                                 ◀ 이전 페이지\r\n                            </ColorButton>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <ColorButton\r\n                                onClick={e=>{\r\n                                    e.stopPropagation()\r\n                                    handleChangePageUpButtonClick()\r\n                                }}\r\n                                color=\"purple\"\r\n                                variant = \"contained\"\r\n                                className = \"changePageUpbtn\"\r\n                            >\r\n                                다음 페이지 ▶\r\n                            </ColorButton>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <Button \r\n                                onClick={e => {\r\n                                    e.stopPropagation()\r\n                                    handleRefreshLyricsButtonClick()\r\n                                }}\r\n                                variant=\"contained\"\r\n                            >\r\n                                가사 단어 추출\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst AdminiAddSongPreview = ({songData}) => {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {songData.map(s =>{\r\n                return (\r\n                    <ListItem button>\r\n                        <ListItemText primary={s.title} secondary={s.artist} />\r\n                    </ListItem>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default AdminiAddSongPreview\r\n","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport Sidebar from \"./Sidebar\";\r\nimport AdminiAddSongPreview from \"../Component/AdminiAddSongPreview\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green, purple } from '@material-ui/core/colors';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './Admin.css';\r\n\r\n//custom button\r\nconst ColorButton = withStyles((theme) => ({\r\n    root: {\r\n      color: theme.palette.getContrastText(purple[500]),\r\n      backgroundColor: green[500],\r\n      '&:hover': {\r\n        backgroundColor: green[700],\r\n      },\r\n    },\r\n  }))(Button);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    }));\r\n//\r\n\r\nconst AdminiAddSong = () => {\r\n    const host = '119.202.133.127'\r\n\r\n    let [loading , setLoading] = useState(false)\r\n    const [song, setSong] = useState([])\r\n    const [isSave, setIsSave] = useState(false)\r\n    let [pageNumberParam, setPageNumberParam] = useState(1)\r\n    let [grNumberParam, setGrNumberaParam] = useState(1)\r\n    const classes = useStyles();\r\n\r\n\r\n    //page 1개당 50개 page = 1 ~ 10 , grNumber = 1 ~ 8 \r\n    const getSongData = ()=>{\r\n        if(!loading)//로딩중이 아닐때만\r\n        {\r\n            \r\n            async function fetchSongPosts(pageNumber,grNumber){\r\n                setLoading(true)   \r\n                await axios.get('http://'+host+':5000/admin/add1?page='+pageNumber+'&grNumber='+grNumber)\r\n                .then((songs)=>{\r\n                    setSong(songs.data);\r\n                    setIsSave(true)\r\n                    setLoading(false)\r\n                });\r\n            }\r\n            fetchSongPosts(pageNumberParam,grNumberParam)   \r\n        }else\r\n            alert('로딩 중')\r\n    }\r\n    const saveSongData=()=>{\r\n        if(isSave){\r\n            async function fetchSongPosts(){\r\n                setLoading(true)   \r\n                await axios.get('http://'+host+':5000/admin/add2')\r\n                .then((data)=>{\r\n                    if(data.result ==='yes'){\r\n                        alert('저장완료')\r\n                        setIsSave(false)\r\n                        setLoading(false)\r\n                    }\r\n                });\r\n            }\r\n            fetchSongPosts()  \r\n            \r\n        }else{\r\n            alert('저장실패')\r\n        }\r\n    }\r\n\r\n    const handleChangePageNumberParam = (event) => {\r\n        setPageNumberParam(event.target.value);\r\n      };\r\n      const handleChangeGrNumberParam = (event) => {\r\n        setGrNumberaParam(event.target.value);\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <header className=\"admini-header\">노래 추가</header>\r\n            </div>\r\n            \r\n            <div className=\"admini-main\">\r\n                <div className=\"admini-sidebar\">\r\n                    <Sidebar></Sidebar>\r\n                </div>\r\n                <div className=\"adminiAdd-content\">\r\n                    <div className=\"adminiAdd-buttons\">\r\n                        <div className =\"adminiAdd-input\">\r\n                            <FormControl required \r\n                                className={classes.formControl}\r\n                            >\r\n                                <InputLabel id=\"demo-simple-select-required-label\">페이지 (1페이지당 50곡)</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-required-label\"\r\n                                    id=\"demo-simple-select-required\"\r\n                                    value={pageNumberParam}\r\n                                    onChange={handleChangePageNumberParam}\r\n                                >\r\n                                <MenuItem value={1}>1</MenuItem>\r\n                                <MenuItem value={2}>2</MenuItem>\r\n                                <MenuItem value={3}>3</MenuItem>\r\n                                <MenuItem value={4}>4</MenuItem>\r\n                                <MenuItem value={5}>5</MenuItem>\r\n                                <MenuItem value={6}>6</MenuItem>\r\n                                <MenuItem value={7}>7</MenuItem>\r\n                                <MenuItem value={8}>8</MenuItem>\r\n                                <MenuItem value={9}>9</MenuItem>\r\n                                <MenuItem value={10}>10</MenuItem>\r\n                                </Select>\r\n                                <FormHelperText>Required</FormHelperText>\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className =\"adminiAdd-input\">\r\n                            <FormControl required \r\n                                className={classes.formControl}\r\n                            >\r\n                                <InputLabel id=\"demo-simple-select-required-label\">장르 선택</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-required-label\"\r\n                                    id=\"demo-simple-select-required\"\r\n                                    value={grNumberParam}\r\n                                    onChange={handleChangeGrNumberParam}\r\n                                >\r\n                                <MenuItem value={1}>발라드</MenuItem>\r\n                                <MenuItem value={2}>댄스</MenuItem>\r\n                                <MenuItem value={3}>랩/힙합</MenuItem>\r\n                                <MenuItem value={4}>R&B</MenuItem>\r\n                                <MenuItem value={5}>인디음악</MenuItem>\r\n                                <MenuItem value={6}>록/메탈</MenuItem>\r\n                                <MenuItem value={7}>트로트</MenuItem>\r\n                                <MenuItem value={8}>포크/블루스</MenuItem>\r\n                                </Select>\r\n                                <FormHelperText>Required</FormHelperText>\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"adminiAdd-button\">\r\n                            <ColorButton \r\n                                onClick={e => {\r\n                                    e.stopPropagation()\r\n                                    getSongData()\r\n                                }}\r\n                                >노래 스크랩\r\n                            </ColorButton>\r\n                        </div>\r\n                        <div className=\"adminiAdd-savebutton\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<SaveIcon />}\r\n                                onClick={e => {\r\n                                    e.stopPropagation()\r\n                                    saveSongData()\r\n                                }}\r\n                                >저장하기\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    { loading &&<CircularProgress />}\r\n                    <div className=\"adminiAdd-preview\" >\r\n                        {song && song.length > 0 &&(\r\n                            <AdminiAddSongPreview songData={song} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminiAddSong\r\n","import React from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nconst column = [\r\n    {field:'id', headerName:'ID', width:70},\r\n    {field: 'firstName', headerName:'First name',width:130},\r\n    {field: 'lastName', headerName:'Last name',width:130},\r\n    {field: 'age',headerName:'Age',type:'number',witdh:90},\r\n    {field: 'fullName',headerName : 'Full Name',\r\n     description : 'this is desc',\r\n     sortable: false,\r\n     width: 160,\r\n     valueGetter:(params)=>\r\n            `${params.getValue('firstName')||''} ${params.getValue('lastName')||''} `\r\n    },\r\n           \r\n]\r\nconst rows = [\r\n    {id:1, lastName: 'snow', firstName : \"jonh\", age:36},\r\n    {id:2, lastName: 'snow2', firstName : \"jonh\", age:36},\r\n    {id:3, lastName: 'snow3', firstName : \"jonh\", age:36},\r\n    {id:4, lastName: 'snow4', firstName : \"jonh\", age:36},\r\n    {id:5, lastName: 'snow5', firstName : \"jonh\", age:36},\r\n]\r\n\r\nconst DataGridDemo = () => {\r\n    return (\r\n        <div className=\"Admini-root\" style={{height: 400, width:'80%' }}>\r\n            <DataGrid rows={rows} columns={column} pageSize={2} checkboxSelection/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataGridDemo\r\n","import React , {useState} from 'react'\r\nimport axios from 'axios';\r\n\r\nconst SearchSong = () => {\r\n    let [songinfo , setSonginfo]= useState([])\r\n    \r\n    function searchsong()\r\n    {\r\n        // async function fetchSongPosts(){\r\n        //     await axios.get('http://www.maniadb.com/api/search/metallica/?sr=artist&display=10&key=example&v=0.5')\r\n        //     .then((songs)=>{\r\n        //         console.log(songs)\r\n        //     });\r\n        // }\r\n        // fetchSongPosts()\r\n        fetch('http://www.maniadb.com/api/search/metallica/?sr=song&display=10&key=example&v=0.5',\r\n        {\r\n           method: 'GET',\r\n           mode: 'no-cors',\r\n            headers: {\r\n                \"Content-Type\": \"text/xml\",\r\n            }\r\n        })\r\n        .then(response => {\r\n            // var xml2json = new XMLtoJSON(); \r\n            // var objson = xml2json.fromStr(response);\r\n            // var convert = require('xml-js');\r\n            // var result1 = convert.xml2json(response, {compact: true, spaces: 4});\r\n            // console.log(result1)\r\n            const parser = new DOMParser();\r\n            const xml = parser.parseFromString(response, \"application/xml\");\r\n            console.log(xml);\r\n        })\r\n        .catch(console.error);\r\n    }\r\n    return (\r\n        <div>\r\n            {songinfo}\r\n            <button onClick={searchsong}>요청 버튼</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchSong\r\n","import React from 'react'\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\"\nimport Home from './Views/Home'\nimport PredictionB from './Views/PredictionB';\nimport Prediction from './Views/Prediction';\nimport Result from './Views/Component/Result';\nimport Admin from './Views/Container/Admin';\nimport AdminiAddSong from './Views/Container/AdminiAddSong';\nimport DataGridDemo from './Views/Container/DataGridDemo';\nimport SearchSong from './Views/Container/SearchSong';\n\nfunction App() {\n \n    return (\n        //JSX : HTML 대용\n            <div>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home}/>\n                        <Route path=\"/PredictionB\" component={PredictionB}/>\n                        <Route path=\"/Prediction2\" component={Prediction}/>\n                        <Route path=\"/result\" component={Result} />\n                        <Route path=\"/admin/add\" component={AdminiAddSong}/>\n                        <Route path=\"/admin\" component={Admin}/>\n                        <Route path=\"/demo\" component={DataGridDemo}/>\n                        <Route path=\"/SearchSong\" component={SearchSong}/>\n                    </Switch>\n                </Router>\n            </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header-img\">\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Header from './Views/Component/Header'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}