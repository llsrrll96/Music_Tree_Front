{"version":3,"sources":["images/tree.png","Views/Home.js","Views/Component/Search.js","Views/PredictionB.js","Views/Prediction.js","Views/Component/Result.js","Views/Container/SidebarItem.js","Views/Container/Sidebar.js","Views/Container/Admin.js","Views/Component/AdminiAddSongPreview.js","Views/Container/AdminiAddSong.js","Views/Container/DataGridDemo.js","App.js","reportWebVitals.js","Views/Component/Header.js","index.js"],"names":["Home","className","src","tree","alt","Grid","container","direction","justify","alignItems","to","Button","style","maxWidth","minWidth","variant","Search","socketId","useState","lyrics","setLyrics","isRedirect","setIsRedirect","songId","setSongId","pathname","state","console","log","noValidate","autoComplete","Box","display","justifyContent","m","p","bgcolor","TextField","required","id","label","onClick","document","getElementById","value","color","socket","io","connect","PredictionB","question","setQuestion","btnValue","setBtnValue","setSocketId","isStart","setIsStart","isSearch","getServerData","emit","on","data","question_type","createQuestionBox","v","Typography","component","border","width","textAlign","step","question_type_name","useEffect","createButton","buttons","map","btn","sendData","sendToServer","Prediction","loading","setLoading","isConnection","useRef","sendAnswer","e","preventDefault","result","current","LinearProgress","type","questionBox","Result","props","location","songinfo","undefined","history","push","SidebarItem","menu","isActive","name","Sidebar","pathName","useLocation","path","index","ColorButton","withStyles","theme","root","palette","getContrastText","purple","backgroundColor","column","field","headerName","editable","Admin","songPosts","setSongPosts","editRowsModel","setEditRowsModel","setEditRowsModelKey","selectionModel","setSelectionModel","selectedLowForModify","setSelectedLowForModify","pageNum","setPageNum","a","axios","get","then","songs","fetchSongPosts","loadSongPost","num","handleEditRowModelChange","useCallback","params","model","Object","keys","as","JSON","stringify","height","rows","columns","pageSize","checkboxSelection","onEditRowModelChange","onSelectionModelChange","newSelection","onRowSelected","stopPropagation","length","post","alert","catch","error","postModifySongs","handleModifyButtonClick","startIcon","postDeleteSongs","handleDeleteButtonClick","AdminiAddSongPreview","songData","s","title","artist","green","AdminiAddSong","song","setSong","witdh","description","sortable","valueGetter","getValue","lastName","firstName","age","DataGridDemo","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Header","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2fe1b4fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tree.c622d5b2.png\";","import React from \"react\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport {Link} from 'react-router-dom';\nimport tree from '../images/tree.png';\nimport './Home.css';\n\n\nfunction Home()\n{\n    return (\n        <div className=\"flex-container\">\n             <div className=\"tree-img\">\n                <img src={tree} alt =\"\"/>\n            </div>           \n            <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Link to=\"/prediction2\">\n                        <Button style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                            Start\n                        </Button>\n                    </Link>\n            </Grid>\n        </div>\n\n    )\n}\nexport default Home","import React ,{useState} from 'react'\r\nimport { Redirect } from 'react-router';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport tree from '../../images/tree.png';\r\n\r\nconst Search = (socketId) => {\r\n    let [lyrics, setLyrics] = useState('')\r\n    let [isRedirect, setIsRedirect] = useState(false)\r\n    let [songId, setSongId] = useState('')\r\n    const send = ()=>{\r\n        setLyrics(document.getElementById(\"lyrics-required\").value)\r\n        console.log(lyrics)\r\n\r\n        //서버 전송\r\n        setSongId('123')\r\n        setIsRedirect(true)\r\n    }\r\n\r\n    const known = () =>{\r\n        //서버에 모른다는 거 보냄\r\n    }\r\n    if(isRedirect){\r\n        return <Redirect to= {{\r\n            pathname: \"/Result\",\r\n            state : songId//test\r\n        }}\r\n        />\r\n    }else\r\n    return (\r\n        <div className=\"search-flex-container\">\r\n            <div className=\"search-tree-img\">\r\n                <img src={tree} alt =\"\"/>\r\n            </div>\r\n            {console.log(socketId)}\r\n\r\n            <div className=\"search-input-box\">\r\n                <form className=\"input\" noValidate autoComplete=\"off\">\r\n                    <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                        <TextField required id=\"lyrics-required\" label=\"가사 입력\"/>\r\n                       \r\n                    </Box>\r\n\r\n                    <Box className=\"search-box\" display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                        <div className=\"search-send-button\">\r\n                            <Button id='sendBtn' onClick={send} variant=\"outlined\" color=\"primary\">\r\n                                보내기\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"search-unknown-button\">\r\n                            <Button id='unknownBtn' onClick={known} variant=\"outlined\" color=\"secondary\">\r\n                                모름\r\n                            </Button>\r\n                        </div>\r\n                    </Box>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport { Redirect } from 'react-router';\nimport io from \"socket.io-client\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport './Home.css';\nimport tree from '../images/tree.png';\nimport Search from './Component/Search';\n\nlet endPoint = \"http://localhost:5000/prediction\"\nlet socket = io.connect(`${endPoint}`)\n\nfunction PredictionB() {\n    let [question, setQuestion] = useState([])\n    let [btnValue, setBtnValue] = useState([])\n    let [socketId,setSocketId] = useState(\"\")\n    let [isStart, setIsStart] = useState(true)\n    let [isRedirect, setIsRedirect] = useState(false)\n    let [isSearch, setIsSearch] = useState(false) //test\n    let [songId, setSongId] = useState('0')\n    \n    //문제를 바꿀때 사용\n    useEffect(()=>{\n        console.log(question)\n        createQuestionBox(question)\n        createButton(btnValue)\n    }) //길이가 변할때 실행\n    \n    //=================서버에서 데이터 받아오는 함수===================//\n    //     data = {\n    //         \"type\": \"1\",\n    //         \"step\": step,  # 1: 성별, 2: 활동유형, 3:장르, 4:년도, 5:OST 여부, 6:피처링 여부, 7:분위기, 8:관련성\n    //         \"question_type_name\": question_type_name[step-1],  #질문에 나올 질문할 속성 명, \"성별\"\n    //         \"question_type\": question_type[step-1]  #답변으로 표시될 노래 속성값들 ,  [\"남성\",\"여성\"]\n    // }\n    //type : 1 = 질문, 2 = 가사 , 3 = 결과\n\n    function getServerData (){\n        // socket.on(\"answer\",ans=>{\n        //     console.log('answer type: '+ans.type)\n        //     if (ans.type === \"1\") //객관식\n        //     {\n        //         setQuestion(ans)\n        //     }else if(ans.type === \"2\")  //가사 찾기\n        //     {\n        //         setIsSearch(true)\n        //     }else if(ans.type === \"3\") //노래 결과\n        //     {\n        //         // data = {\n        //         //     \"type\" : \"3\",\n        //         //     \"songId\" : \"1234\"\n        //         // }\n        //         setSongId(ans.songId)\n        //         setIsRedirect(true)\n        //     }\n        // })\n        /*질문생성*/\n        console.log(\"서버 데이터\")\n        socket.emit(\"question\", {socketId : socket.id})\n        socket.on(\"response\",data=>{\n            setQuestion(data)\n            setBtnValue(data.question_type)\n            console.log(data)\n            console.log('버튼: ' + data.question_type)\n        })\n    }\n\n    //====================================//\n    //사용자 답 선택\n    //사전 조건 : 소켓 연결\n    const sendToServer = (btnValue) => {\n        //버튼 값을 보낸다.\n        const sendData = {\n            \"btnValue\" : btnValue,\n            \"socketId\" : socket.id\n        }\n        socket.emit(\"answer\", sendData)\n        \n        //값을 가져오고 갱신한다.\n        getServerData(socketId)\n    }\n    \n    //===============서버와 소켓 연결==================//\n    function connectServer (){\n        setSocketId(socket.id)\n        socket.emit(\"join\",\n            {\n                socketId : socket.id,\n            },()=>{\n                socket.on(\"jresponse\",v=>{\n                    console.log('소켓 '+ v.socketId)\n                    getServerData(v.socketId)\n                })\n            }\n        )\n        //첫 문제 생성\n    //     data = {\n    //         \"type\": \"1\",\n    //         \"step\": step,  # 1: 성별, 2: 활동유형, 3:장르, 4:년도, 5:OST 여부, 6:피처링 여부, 7:분위기, 8:관련성\n    //         \"question_type_name\": question_type_name[step-1],  #질문에 나올 질문할 속성 명, \"성별\"\n    //         \"question_type\": question_type[step-1]  #답변으로 표시될 노래 속성값들 ,  [\"남성\",\"여성\"]\n    // }\n    }\n\n    //===============질문 생성==================//\n    function createQuestionBox (question)\n    {\n        if(isStart){\n            connectServer()            \n            setIsStart(false)\n        }\n\n        return(\n            <div className=\"question-body\" >\n                <Grid\n                container\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Typography component=\"div\">\n                        <Box display=\"flex\" m={1} border={1} width={300}>\n                            <Box p={1} bgcolor=\"info.main\" width={50} textAlign=\"center\">\n                                <p className=\"question-text\">\n                                    {question.step}\n                                </p>\n                            </Box>\n                            <Box p={1}>\n                                <p className=\"question-text\" width={1/4}>\n                                    {question.question_type_name}\n                                </p>\n                            </Box>\n                        </Box>\n                    </Typography>\n\n                </Grid>\n            </div>\n        )\n    }\n    \n    //버튼생성\n    const createButton =(buttons)=> //배열 형식\n        buttons && buttons.map(btn => {\n        return(<Button onClick={()=>sendToServer(btn)} value='btn' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                    {btn}\n                </Button>\n        )})\n\n    // const buttonList = testbtn && testbtn.map(btn => {\n    //         return(<Button onClick={()=>sendToServer(btn)} value='btn' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n    //             {btn}\n    //         </Button>)\n    // })\n    \n\n    //=======================================//\n    if(isRedirect){\n        return <Redirect to= {{\n            pathname: \"/Result\",\n            state : songId\n        }}/>\n    }else if(isSearch){\n        return <Search socketId = {socketId}/>\n    }else{\n        return (\n            //JSX : HTML 대용\n            <div className='main'>\n                <div className=\"search-tree-img \">\n                    <img src={tree} alt =\"\"/>\n                </div>\n                <div className=\"question\">\n                    {createQuestionBox(question)}\n                </div>\n                <div className=\"flex-container\">\n                    <div className=\"buttons\">\n                        <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        >   \n                            {createButton(question.question_type)}\n                        </Grid>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PredictionB;","import React, { useState, useEffect, useRef } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nimport tree from '../images/tree.png';\r\nimport Search from './Component/Search';\r\nimport './Home.css';\r\n\r\n\r\nlet endPoint = \"http://localhost:5000/prediction\"\r\nlet socket = io.connect(`${endPoint}`)\r\n\r\nfunction Prediction() \r\n{\r\n    let [loading , setLoading] = useState(true)\r\n    let [isSearch, setIsSearch] = useState(false)\r\n    let [isResult, setIsResult] = useState(false)\r\n    let [socketId, setSocketId] = useState('')\r\n    let [question, setQuestion] = useState([])\r\n    let [btnValue, setBtnValue] = useState([])\r\n\r\n    const isConnection = useRef(false)\r\n\r\n//=================================//\r\n    /* 데이터 요청 함수 */\r\n    function getQuestionData()\r\n    {\r\n        setLoading(true)\r\n        console.log(\"서버 데이터\")\r\n        socket.emit(\"question\", {socketId : socket.id,step: 1})\r\n        socket.on(\"response\",data=>{\r\n            setQuestion(data) //set 될때마다 리렌더링됨\r\n            setBtnValue(data.question_type)\r\n            console.log(data)\r\n            console.log('버튼: ' + data.question_type)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    function getQuestionData2()\r\n    {\r\n        setLoading(true)\r\n        console.log(\"서버 데이터\")\r\n        socket.emit(\"question\", {socketId : socket.id,step: 2})\r\n        socket.on(\"response\",data=>{\r\n            setQuestion(data) //set 될때마다 리렌더링됨\r\n            setBtnValue(data.question_type)\r\n            console.log(data)\r\n            console.log('버튼: ' + data.question_type)\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    /* 클릭한 값을 서버에 보낸다.*/\r\n    const sendAnswer = (e, btnValue) => {\r\n        e.preventDefault()\r\n        console.log('btn: '+btnValue)\r\n        const sendData = {\r\n            \"btnValue\" : btnValue,\r\n            \"socketId\" : socket.id\r\n        }\r\n        socket.emit(\"answer\", sendData)\r\n        socket.on(\"answer\",data=>{\r\n            //서버의 응답을 받은 후\r\n            console.log(\"answer: \"+data.result)\r\n            //서버에 다음 질문 요청\r\n            getQuestionData2()\r\n        })\r\n    }\r\n\r\n//=================================//\r\n    useEffect(()=>{\r\n        console.log(\"마운트될때만 실행된다.\") //처음 나타났을때\r\n        if(!isConnection.current){ //첫\r\n            isConnection.current = true\r\n            socket.emit(\"join\",{socketId : socket.id},()=>{\r\n                    socket.on(\"jresponse\",v=>{\r\n                        console.log('소켓 '+socket.id)\r\n                        // getServerData(v.socketId)\r\n                    })\r\n            })\r\n        }\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        console.log('렌더링 될때마다 실행')\r\n        if(isConnection.current)\r\n        {\r\n            console.log('연결성공시 실행')\r\n            getQuestionData()\r\n        }\r\n        else{\r\n            console.log('false')\r\n        }\r\n    },[])\r\n\r\n//=================================//\r\n    /* 질문 컴포넌트 */\r\n    function questionBox(question)\r\n    {\r\n        if(question.type === '1') //타입 체크\r\n        return(\r\n            <div className=\"question-body\" >\r\n                <Grid\r\n                container\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                >\r\n                    <Typography component=\"div\">\r\n                        <Box display=\"flex\" m={1} border={1} width={300}>\r\n                            <Box p={1} bgcolor=\"info.main\" width={50} textAlign=\"center\">\r\n                                <p className=\"question-text\">\r\n                                    {question.step}\r\n                                </p>\r\n                            </Box>\r\n                            <Box p={1}>\r\n                                <p className=\"question-text\" width={1/4}>\r\n                                    {question.question_type_name}\r\n                                </p>\r\n                            </Box>\r\n                        </Box>\r\n                    </Typography>\r\n\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /* 답변 컴포넌트 */\r\n    function buttonDIV()\r\n    {\r\n        return(\r\n            <div className=\"flex-container\">\r\n            <div className=\"buttons\">\r\n                <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                >   \r\n                    {createButton(question.question_type)}\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n    const createButton =(buttons)=> //배열 형식\r\n        buttons && buttons.map(btn => {\r\n            return(\r\n                    <Button onClick={(e)=>sendAnswer(e, btn)} key={btn} value='btn' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\r\n                        {btn}\r\n                    </Button>\r\n        )})\r\n\r\n    return (\r\n        <div className='main'>\r\n            {console.log('question: '+ question)}\r\n\r\n            <div className=\"search-tree-img \">\r\n                <img src={tree} alt =\"\"/>\r\n            </div>\r\n            { loading &&<LinearProgress />}\r\n\r\n            {questionBox(question)}\r\n            {buttonDIV()}\r\n        </div>\r\n    );\r\n}\r\nexport default Prediction;","import React, {useEffect} from 'react'\nimport './Result.css'\n\nfunction Result(props)\n{\n    let songId = props.location.state\n    const songinfo={ //더미 데이터\n        title : \"라일락\",\n        artist : \"아이유\",\n        album : \"IU 5th Album 'LILAC\",\n        genre : \"댄스\",\n        lyric : `나리는 꽃가루에 눈이 따끔해 (아야)\n        \\n눈물이 고여도 꾹 참을래\n        내 마음 한켠 비밀스런 오르골에 넣어두고서\n        영원히 되감을 순간이니까\n        \n        우리 둘의 마지막 페이지를 잘 부탁해\n        어느 작별이 이보다 완벽할까\n        나리는 꽃가루에 눈이 따끔해 (아야)\n        눈물이 고여도 꾹 참을래\n        내 마음 한켠 비밀스런 오르골에 넣어두고서\n        영원히 되감을 순간이니까\n        \n        우리 둘의 마지막 페이지를 잘 부탁해\n        어느 작별이 이보다 완벽할까\n        나리는 꽃가루에 눈이 따끔해 (아야)\n        눈물이 고여도 꾹 참을래\n        내 마음 한켠 비밀스런 오르골에 넣어두고서\n        영원히 되감을 순간이니까\n        \n        우리 둘의 마지막 페이지를 잘 부탁해\n        어느 작별이 이보다 완벽할까`\n    }\n    \n    //값 없이 들어 왔을 경우\n    useEffect(()=>{\n        if (props.location.state === undefined){\n            props.history.push(\"/\");\n        }\n    })\n    \n    const displaySong =()=>{\n        console.log(\"result song1: \" +props.location.state)\n        console.log(\"sondId: \"+ songId)\n        return (\n            <div>\n\n                <div className = \"songinfo-border\">\n                    <div className =\"songinfo\">\n                        <h5>{songinfo.title}</h5>\n                        <p>{songinfo.artist}</p>\n                        <p>{songinfo.album}</p>\n                        <p>{songinfo.genre}</p>\n                        <p>{songinfo.lyric}</p>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n    if (props.location.state){\n        return (\n            <div>\n                {displaySong()}\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\nexport default Result","import React from 'react'\r\nimport './Admin.css';\r\n\r\nfunction SidebarItem({ menu, isActive }) {\r\n    return isActive === true ? (\r\n      <div className=\"sidebar-item active\">\r\n        <p>{menu.name}</p>\r\n      </div>\r\n    ) : (\r\n      <div className=\"sidebar-item \">\r\n        <p>{menu.name}</p>\r\n      </div>\r\n    );\r\n  }\r\nexport default SidebarItem","import React from 'react'\r\nimport {Link,useLocation} from 'react-router-dom'\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport './Admin.css';\r\n\r\nfunction Sidebar() {\r\n\r\n    // URL의 path값을 받아올 수 있다.\r\n    const pathName = useLocation().pathname;\r\n  \r\n    const menus = [\r\n      { name: \"노래추가\", path:\"/admin/add\"},\r\n      { name: \"노래목록\", path:\"/admin\"}\r\n    ];\r\n  \r\n    return (\r\n      <div className=\"sidebar\">\r\n        {menus.map((menu, index) => {\r\n          return (\r\n            <Link to={menu.path} key={index}>\r\n              <SidebarItem\r\n                menu={menu}\r\n                isActive={pathName === menu.path ? true : false}\t// 현재 URL pathname과 객체에 담긴 path값 일치 여부 확인\r\n              />\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n}\r\nexport default Sidebar;","import React, {useState, useEffect,useCallback} from 'react'\r\nimport axios from 'axios';\r\nimport Sidebar from \"./Sidebar\";\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { Header } from 'semantic-ui-react';\r\nimport './Admin.css';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { purple } from '@material-ui/core/colors';\r\n\r\n//custom button\r\nconst ColorButton = withStyles((theme) => ({\r\n    root: {\r\n      color: theme.palette.getContrastText(purple[500]),\r\n      backgroundColor: purple[500],\r\n      '&:hover': {\r\n        backgroundColor: purple[700],\r\n      },\r\n    },\r\n  }))(Button);\r\n//\r\nconst column =[\r\n    {field: 'id',headerName:'ID' },\r\n    {field: 'title', headerName:'제목' ,width:130},\r\n    {field: 'artist', headerName:'가수', width:130},\r\n    {field: 'album', headerName:'앨범',width: 130},\r\n    {field: 'ost', headerName:'OST', type:'number',width:100},\r\n    {field: 'rel_date', headerName: 'DATE', width:120},\r\n    {field: 'genre', headerName: '장르', type:'number', width:90},\r\n    {field: 'group_type', headerName: '유형', type:'number', width:90},\r\n    {field: 'gender', headerName: '성별', type:'number', width:90},\r\n    {field: 'feat', headerName: 'Feat', width:100},\r\n    {field: 'relevance', headerName: '관련성', width:110, editable:true},\r\n    {field: 'mood', headerName: '분위기', width:100, editable: true},\r\n    {field: 'lyrics', headerName: '가사', width:200, editable: true},\r\n    {field: 'words', headerName: '기타', width:100,editable:true}\r\n]\r\n\r\nfunction Admin ()  {\r\n    const [songPosts, setSongPosts] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    //const [currentPage, setCurrentPage] = useState(1)\r\n    //const [postsPerPage, setpostsPerPage] = useState(50)\r\n    const [editRowsModel, setEditRowsModel] = useState({})       //수정된 row\r\n    const [editrowsMedelKey, setEditRowsModelKey] = useState('') //key\r\n    const [selectionModel, setSelectionModel] = useState([])            //선택된 id\r\n    const [selectedLowForModify, setSelectedLowForModify] = useState({}) //수정 선택된 값\r\n    const [pageNum , setPageNum] = useState(1)\r\n\r\n    useEffect(() => {\r\n        async function fetchSongPosts(){\r\n            setLoading(true);    \r\n            console.log('로딩')        \r\n            await axios.get('http://127.0.0.1:5000/song-info?index=' + pageNum)\r\n            .then((songs)=>{\r\n                setSongPosts(songs.data);\r\n                setLoading(false);\r\n            });\r\n        }\r\n        fetchSongPosts()\r\n    },[]);\r\n\r\n    const loadSongPost = (num)=>{\r\n        async function fetchSongPosts(){\r\n            setLoading(true);    \r\n            console.log('로딩')        \r\n            await axios.get('http://127.0.0.1:5000/song-info?index=' + num)\r\n            .then((songs)=>{\r\n                setSongPosts(songs.data);\r\n                setLoading(false);\r\n            });\r\n        }\r\n        fetchSongPosts()\r\n    }\r\n    \r\n    \r\n    //수정할 값 셋팅 하는 함수\r\n    //선언한 함수 계속 사용해야 할때 = useCallback\r\n    const handleEditRowModelChange = useCallback(\r\n        (params) => {\r\n            setEditRowsModel(params.model)\r\n            setEditRowsModelKey(Object.keys(params.model)[0])\r\n            //console.log(Object.keys(params.model)[0])\r\n        },\r\n        []\r\n    )\r\n\r\n    //selection 된 row 들\r\n    //id 배열 데이터 삭제 버튼\r\n    const handleDeleteButtonClick = ()=>{\r\n        console.log(selectionModel) //[1, 2, 3, 4, 5]\r\n        if ((selectionModel && selectionModel.length) < 1 || selectionModel[0]== null){\r\n            alert('삭제할 행을 선택해 주세요')\r\n        }else{\r\n            \r\n            async function postDeleteSongs(){  \r\n                await axios.post('http://127.0.0.1:5000/admin/delete',selectionModel)\r\n                .then( function(result) {\r\n                    console.log(result.data)\r\n                    alert(result.data.result)\r\n                }).catch( (error) => {\r\n                    console.log('error: ', error)\r\n                })\r\n            }\r\n            postDeleteSongs()\r\n        }\r\n    }\r\n    //수정 버튼\r\n    const handleModifyButtonClick = (selectedLowForModify) =>{\r\n        console.log(selectionModel)\r\n        if ((selectionModel && selectionModel.length) === 1){ //수정 항목 보내는 부분\r\n            console.log(selectedLowForModify) //선택된 값\r\n            console.log(selectedLowForModify.data)            \r\n            async function postModifySongs(){  \r\n                await axios.post('http://127.0.0.1:5000/admin/modify',selectedLowForModify.data)\r\n                .then( function(result) { //서버에서 온 값\r\n                    console.log(result.data)\r\n                    alert(result.data.result)\r\n                }).catch( (error) => {\r\n                    console.log('error: ', error)\r\n                })\r\n            }\r\n            postModifySongs()\r\n        }else{\r\n            alert(\"한 행씩 수정해 주세요\")\r\n        }\r\n    }\r\n    //페이지 Down 버튼\r\n    const handleChangePageDownButtonClick = () =>{\r\n        if(pageNum > 1)\r\n        {\r\n            //pageNumber -= 50\r\n            loadSongPost(pageNum - 50)\r\n            setPageNum(pageNum - 50)\r\n            console.log(\"페이지 변경: \"+ pageNum)\r\n        }else{\r\n            console.log(pageNum)\r\n            alert(\"내릴 수 없습니다.\")\r\n        }\r\n        \r\n    }\r\n    //페이지 Up 버튼\r\n    const handleChangePageUpButtonClick = ()=>{\r\n        //pageNumber += 50\r\n        loadSongPost(pageNum + 50)\r\n        setPageNum(pageNum + 50)\r\n        console.log(\"페이지 변경: \"+ pageNum)\r\n    }\r\n\r\n    //row 선택\r\n    const onRowSelected = (params)=>{\r\n        //console.log(params.data)\r\n        setSelectedLowForModify(params)\r\n    }\r\n\r\n    // {\"3\":{\"lyrics\":{\"value\": \"값\"}}}\r\n    return (\r\n        \r\n        <div>\r\n            <div className=\"admini-header\">\r\n                <Header as='h2'>노래 목록</Header>\r\n            </div>\r\n            \r\n            <div className=\"admini-main\">\r\n                <div className=\"admini-sidebar\">\r\n                    <Sidebar></Sidebar>\r\n                </div>\r\n                <div className=\"admini-content\">\r\n                    <div>\r\n                        <code>editRowsModel: {JSON.stringify(editRowsModel)}</code>\r\n                    </div>\r\n                    <div style={{height: 600, width:'100%' }}>\r\n                        <DataGrid className=\"datagrid\"\r\n                        rows={songPosts} \r\n                        columns={column} \r\n                        loading={loading} \r\n                        pageSize={100} \r\n                        checkboxSelection\r\n                        editRowsModel={editRowsModel}\r\n                        onEditRowModelChange={handleEditRowModelChange}\r\n                        selectionModel={selectionModel}\r\n                        onSelectionModelChange={(newSelection) => {\r\n                            setSelectionModel(newSelection.selectionModel);\r\n                        }}\r\n                        onRowSelected={onRowSelected}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"admini-buttons\">\r\n                        <div className=\"btn\">\r\n                            <Button \r\n                                onClick={e => {\r\n                                    e.stopPropagation()\r\n                                    handleModifyButtonClick(selectedLowForModify)\r\n                                }}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                startIcon={<SaveIcon/>}\r\n                                \r\n                            >\r\n                                수정하기\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <Button \r\n                                onClick={e => {\r\n                                    e.stopPropagation()\r\n                                    handleDeleteButtonClick()\r\n                                }}\r\n                                color=\"secondary\"\r\n                                variant=\"contained\"\r\n                                startIcon={<DeleteIcon/>}\r\n                            >\r\n                                삭제하기\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <ColorButton\r\n                                onClick={e=>{\r\n                                    e.stopPropagation()\r\n                                    handleChangePageDownButtonClick()\r\n                                }}\r\n                                color=\"purple\"\r\n                                variant = \"contained\"\r\n                                className = \"changePageDownbtn\"\r\n                            >\r\n                                 ◀ 이전 페이지\r\n                            </ColorButton>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <ColorButton\r\n                                onClick={e=>{\r\n                                    e.stopPropagation()\r\n                                    handleChangePageUpButtonClick()\r\n                                }}\r\n                                color=\"purple\"\r\n                                variant = \"contained\"\r\n                                className = \"changePageUpbtn\"\r\n                            >\r\n                                다음 페이지 ▶\r\n                            </ColorButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n","import React from 'react'\r\n\r\nconst AdminiAddSongPreview = ({songData}) => {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {songData.map(s =>{\r\n                return <li>{s.title} {s.artist} </li>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default AdminiAddSongPreview\r\n","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport Sidebar from \"./Sidebar\";\r\nimport AdminiAddSongPreview from \"../Component/AdminiAddSongPreview\";\r\nimport { Header } from 'semantic-ui-react';\r\nimport './Admin.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green, purple } from '@material-ui/core/colors';\r\n\r\n//custom button\r\nconst ColorButton = withStyles((theme) => ({\r\n    root: {\r\n      color: theme.palette.getContrastText(purple[500]),\r\n      backgroundColor: green[500],\r\n      '&:hover': {\r\n        backgroundColor: green[700],\r\n      },\r\n    },\r\n  }))(Button);\r\n//\r\n\r\nconst AdminiAddSong = () => {\r\n    const [song, setSong] = useState([''])\r\n    const data = [\r\n        {\r\n                title: \"사랑 안 해\",\r\n                artist: \"백지영\"\r\n        },\r\n        {\r\n                title: \"불꽃놀이\",\r\n                artist: \"하진\"\r\n        }\r\n    ]\r\n    // [\r\n    //     {\r\n    //             title: \"사랑 안 해\",\r\n    //             artist: \"백지영\"\r\n    //     },\r\n    //     {\r\n    //             title: \"불꽃놀이\",\r\n    //             artist: \"하진\"\r\n    //     }\r\n    // ]\r\n\r\n    //page 1개당 50개\r\n    const displaySongForAdd = ()=>{\r\n        async function fetchSongPosts(){\r\n            console.log('로딩')        \r\n            await axios.get('http://127.0.0.1:5000/admin/addt?page=1&grNumber=1')\r\n            .then((songs)=>{\r\n                setSong(songs);\r\n                console.log(songs)\r\n            });\r\n        }\r\n        fetchSongPosts()\r\n    }\r\n    const test =()=>{\r\n        setSong(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"admini-header\">\r\n                <Header as='h2'>노래 추가</Header>\r\n            </div>\r\n            \r\n            <div className=\"admini-main\">\r\n                <div className=\"admini-sidebar\">\r\n                    <Sidebar></Sidebar>\r\n                </div>\r\n                <div className=\"admini-content\">\r\n                    <div className =\" adminiAdd-input\">\r\n                        \r\n                    </div>\r\n                    <div className=\"adminiAdd-button\">\r\n                        <ColorButton \r\n                            onClick={e => {\r\n                                e.stopPropagation()\r\n                                test() //displaySongForAdd()\r\n                            }}\r\n                        >추가하기\r\n                        </ColorButton>\r\n                    </div>\r\n                    <div className=\"adminiAdd-preview\" >\r\n                        {song && song.length &&(\r\n                            <AdminiAddSongPreview songData={song} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default AdminiAddSong\r\n","import React from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nconst column = [\r\n    {field:'id', headerName:'ID', width:70},\r\n    {field: 'firstName', headerName:'First name',width:130},\r\n    {field: 'lastName', headerName:'Last name',width:130},\r\n    {field: 'age',headerName:'Age',type:'number',witdh:90},\r\n    {field: 'fullName',headerName : 'Full Name',\r\n     description : 'this is desc',\r\n     sortable: false,\r\n     width: 160,\r\n     valueGetter:(params)=>\r\n            `${params.getValue('firstName')||''} ${params.getValue('lastName')||''} `\r\n    },\r\n           \r\n]\r\nconst rows = [\r\n    {id:1, lastName: 'snow', firstName : \"jonh\", age:36},\r\n    {id:2, lastName: 'snow2', firstName : \"jonh\", age:36},\r\n    {id:3, lastName: 'snow3', firstName : \"jonh\", age:36},\r\n    {id:4, lastName: 'snow4', firstName : \"jonh\", age:36},\r\n    {id:5, lastName: 'snow5', firstName : \"jonh\", age:36},\r\n]\r\n\r\nconst DataGridDemo = () => {\r\n    return (\r\n        <div className=\"Admini-root\" style={{height: 400, width:'80%' }}>\r\n            <DataGrid rows={rows} columns={column} pageSize={2} checkboxSelection/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataGridDemo\r\n","import React from 'react'\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\"\nimport Home from './Views/Home'\nimport PredictionB from './Views/PredictionB';\nimport Prediction from './Views/Prediction';\nimport Result from './Views/Component/Result';\nimport Admin from './Views/Container/Admin';\nimport AdminiAddSong from './Views/Container/AdminiAddSong';\nimport DataGridDemo from './Views/Container/DataGridDemo';\n\n\nfunction App() {\n \n    return (\n        //JSX : HTML 대용\n            <div>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home}/>\n                        <Route path=\"/PredictionB\" component={PredictionB}/>\n                        <Route path=\"/Prediction2\" component={Prediction}/>\n                        <Route path=\"/result\" component={Result} />\n                        <Route path=\"/admin/add\" component={AdminiAddSong}/>\n                        <Route path=\"/admin\" component={Admin}/>\n                        <Route path=\"/demo\" component={DataGridDemo}/>\n                    </Switch>\n                </Router>\n            </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header-img\">\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Header from './Views/Component/Header'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}