{"version":3,"sources":["images/tree.png","Views/Home.js","Views/Component/Search.js","Views/Prediction.js","Views/Result.js","App.js","reportWebVitals.js","Views/Component/Header.js","index.js"],"names":["Home","className","src","tree","alt","Grid","container","direction","justify","alignItems","to","Button","style","maxWidth","minWidth","variant","Search","props","useState","lyrics","setLyrics","noValidate","autoComplete","Box","display","justifyContent","m","p","bgcolor","TextField","required","id","label","onClick","document","getElementById","value","console","log","color","socket","io","connect","Prediction","question","setQuestion","socketId","setSocketId","isStart","setIsStart","isRedirect","setIsRedirect","isSearch","setIsSearch","songId","setSongId","btnTexts","sendToServer","btnValue","sendData","emit","on","ans","type","pathname","state","v","Typography","component","border","width","textAlign","step","q","createQuestionBox","Result","sondId","location","songinfo","useEffect","undefined","history","push","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9abba331.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tree.c622d5b2.png\";","import React from \"react\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport {Link} from 'react-router-dom';\nimport tree from '../images/tree.png';\nimport './Home.css';\n   \nfunction Home()\n{\n    return (\n        <div className=\"flex-container\">\n             <div className=\"tree-img\">\n                <img src={tree} alt =\"\"/>\n            </div>           \n            <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Link to=\"/prediction\">\n                        <Button style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                            Start\n                        </Button>\n                    </Link>\n            </Grid>\n        \n        </div>\n\n    )\n}\nexport default Home","import React ,{useState} from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport tree from '../../images/tree.png';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Search = (props) => {\r\n    let [lyrics, setLyrics] = useState('')\r\n    \r\n    const send = ()=>{\r\n        setLyrics(document.getElementById(\"lyrics-required\").value)\r\n        console.log(lyrics)\r\n\r\n        //서버 전송\r\n    }\r\n    const known = () =>{\r\n        //서버에 모른다는 거 보냄\r\n    }\r\n\r\n    return (\r\n        <div className=\"Search-flex-container\">\r\n            <div className=\"search-tree-img\">\r\n                <img src={tree} alt =\"\"/>\r\n            </div>\r\n\r\n            <div className=\"search-input-box\">\r\n                <form className=\"input\" noValidate autoComplete=\"off\">\r\n                    <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                        <TextField required id=\"lyrics-required\" label=\"가사 입력\"/>\r\n                       \r\n                    </Box>\r\n\r\n                    <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\r\n                        <div className=\"search-send-button\">\r\n                            <Button id='sendBtn' onClick={send} variant=\"outlined\" color=\"primary\">\r\n                                SEND\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"search-unknown-button\">\r\n                            <Button id='unknownBtn' onClick={known} variant=\"outlined\" color=\"secondary\">\r\n                                모르겠음\r\n                            </Button>\r\n                        </div>\r\n                    </Box>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n\r\n\r\n","import React, {useState} from 'react';\nimport { Redirect } from 'react-router';\nimport io from \"socket.io-client\";\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport './Home.css';\nimport tree from '../images/tree.png';\nimport Search from './Component/Search';\n\n\nlet endPoint = \"http://localhost:5000/prediction\"\nlet socket = io.connect(`${endPoint}`)\n\nfunction Prediction() {\n    let [question, setQuestion] = useState([0,'질문 입니까?'])\n    let [socketId,setSocketId] = useState('')\n    let [isStart, setIsStart] = useState(true)\n    let [isRedirect, setIsRedirect] = useState(false)\n    let [isSearch, setIsSearch] = useState(false) //test\n\n    let [songId, setSongId] = useState('0')\n    const btnTexts = ['네','몰라요','아니요']\n\n    //문제를 바꿀때 사용\n    // useEffect(()=>{\n    //     getBtnText()\n    // },[btnText.length]) //길이가 변할때 실행\n    \n    //=================서버에서 데이터 받아오는 함수===================//\n    // # data = {\n    // #             \"type\" : \"1\",\n    // #             \"step\": \"2\",\n    // #             \"q\":\"2번 질문입니다.\",\n    // #             'socketId': session['socketId']\n    // #         }\n    //type : 1 = 질문, 2 = 가사 , 3 = 결과\n    const getServerData =()=>{\n        socket.on(\"answer\",ans=>{\n            if (ans.type === \"1\") //객관식\n            {\n                console.log('answer type: '+ans.type)\n                console.log('answer socketId: '+ans.socketId)\n                setQuestion(ans)\n                setSocketId(ans.socketId)\n            }else if(ans.type === \"2\")  //가사 찾기\n            {\n                setIsSearch(true)\n            }else if(ans.type === \"3\") //노래 결과\n            {\n                // data = {\n                //     \"type\" : \"3\",\n                //     \"songId\" : \"1234\"\n                // }\n                setSongId(ans.songId)\n                setIsRedirect(true)\n            }\n        })\n    }\n\n    //====================================//\n    //사용자 답 선택\n    //사전 조건 : 소켓 연결\n    const sendToServer = (btnValue) => {\n        //버튼 값을 보낸다.\n        const sendData = {\n            \"btnValue\" : btnValue,\n            \"socketId\" : socketId\n        }\n        socket.emit(\"answer\", sendData)\n        //값을 가져오고 갱신한다.\n        getServerData()\n    }\n    \n    //===============서버와 소켓 연결==================//\n    const connectServer =()=>{\n        socket.emit(\"join\",\n            {\n                socketId : socket.id,\n            }\n        )\n        //첫 문제 생성\n        // data = {\n        //     \"step\": \"1\",\n        //     \"q\":\"1번 질문입니다.\",\n        //     'socketId': session['socketId']\n        // }\n        socket.on(\"response\",v=>{\n            console.log('data '+ v.socketId)\n            setQuestion(v)\n            setSocketId(v.socketId)\n        })\n    }\n\n    //===============질문 생성==================//\n    const createQuestionBox =(question)=>{\n        if(isStart){\n            connectServer()\n            setIsStart(false)\n        }\n        return(\n            <div className=\"question-body\" >\n                <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Typography component=\"div\">\n                        <Box display=\"flex\" m={1} border={1} width={300}>\n                            <Box p={1} bgcolor=\"info.main\" width={50} textAlign=\"center\">\n                                <p className=\"question-text\">\n                                    {question.step}\n                                </p>\n                            </Box>\n                            <Box p={1}>\n                                <p className=\"question-text\" width={1/4}>\n                                    {question.q}\n                                </p>\n                            </Box>\n                        </Box>\n                    </Typography>\n\n                </Grid>\n            </div>\n        )\n\n    }\n    //버튼생성\n    const createButton =()=>{\n        \n        return (\n            <div className=\"buttons\">\n                <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                >\n                    <Button onClick={()=>sendToServer('1')} value='1' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\">\n                        {btnTexts[0]}\n                    </Button>\n                    <Button onClick={()=>sendToServer('2')} value='2' style={{maxWidth:'300px',minWidth:'300px'}} variant=\"outlined\" color=\"primary\">\n                        {btnTexts[1]}\n                    </Button>\n                    <Button onClick={()=>sendToServer('3')} style={{maxWidth:'300px',minWidth:'300px'}} value='3' variant=\"outlined\" color=\"secondary\">\n                        {btnTexts[2]}\n                    </Button>\n                </Grid>\n            </div>\n        )\n    }\n\n    //=======================================//\n    if(isRedirect){\n        return <Redirect to= {{\n            pathname: \"/Result\",\n            state : songId\n        }}\n        />\n    }else if(isSearch){\n        return <Search />\n    }\n    return (\n        //JSX : HTML 대용\n        <div className='main'>\n            <div className=\"search-tree-img \">\n                <img src={tree} alt =\"\"/>\n            </div>\n            <div className=\"question\">\n                {createQuestionBox(question)}\n            </div>\n            <div className=\"flex-container\">\n                {createButton()}\n            </div>\n        </div>\n    );\n}\n\nexport default Prediction;","import React, {useEffect} from 'react'\nimport './Result.css'\n\nfunction Result(props)\n{\n    let sondId = props.location.state\n    const songinfo={\n        title : \"title\",\n        artist : \"artist\",\n        album : \"album\",\n        genre : \"genre\",\n        lyric : \"lyric\"\n    }\n    \n    useEffect(()=>{\n        if (props.location.state === undefined){\n            props.history.push(\"/\");\n        }\n    })\n    \n    const displaySong =()=>{\n        console.log(\"result song1: \" +props.location.state)\n        console.log(\"sondId: \"+ sondId)\n        return (\n            <div className = \"songinfo_side\">\n                <div className =\"songinfo\">\n                    <p>{songinfo.title}</p>\n                    <p>{songinfo.artist}</p>\n                    <p>{songinfo.album}</p>\n                    <p>{songinfo.genre}</p>\n                    <p>{songinfo.lyric}</p>\n                </div>\n            </div>\n        )\n    }\n\n    if (props.location.state){\n        return (\n            <div>\n                <span>{props.location.state}</span>\n                {displaySong()}\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\nexport default Result","import React from 'react'\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\"\nimport Home from './Views/Home'\nimport Prediction from './Views/Prediction';\nimport Result from './Views/Result';\n\nfunction App() {\n \n    return (\n        //JSX : HTML 대용\n            <div>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home}/>\n                        <Route path=\"/prediction\" component={Prediction}/>\n                        <Route path=\"/result\" component={Result} />\n                    </Switch>\n                </Router>\n            </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header-img\">\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Header from './Views/Component/Header'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}